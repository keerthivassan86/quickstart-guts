heat_template_version: 2014-10-16

description: HOT template to create a VM in alok network

parameters:
    name:
        type: string
        label: "Name of this stack"
        default: "okanstack"
        description: "Key name to be used"
    deployment_type:
        type: string
        label: "Type of Deployment"
        default: "blank"
        description: "Type of Deployment. Choices are : ['blank', 'aio']"
    keypair:
        type: string
        label: "Key Pair Name"
        default: "alok"
        description: "Key to use for SSH access"
        constraints:
            - custom_constraint: nova.keypair
              description: "Must provide a public key (pair) known to Nova"
    image:
        type: string
        label: Image ID
        description: "The Image ID to use"
        constraints:
            - custom_constraint: glance.image
              description: Must identify an image known to Glance
    flavor:
        type: string
        label: "Instance Flavor"
        default: "m1.medium"
        description: "The flavor to use"
        constraints:
            - custom_constraint: nova.flavor
              description: "Instance Flavor must be a flavor known to Nova"
    network:
        type: string
        label: Network ID
        description: "Network ID to use"
        constraints:
            - custom_constraint: neutron.network
              description: "Must select an existing network"
    subnet:
        type: string
        label: Subnet ID
        description: "Subnet ID to use"
        constraints:
            - custom_constraint: neutron.subnet
              description: "Must select an existing subnet"
    security_group:
        type: string
        label: Security Group Name
        description: "The Security Group Name to use"
    floating_ip:
        type: string
        label: "Floating IP ID"
        description: "Floating IP ID to use"

resources:
    port:
        type: OS::Neutron::Port
        properties:
            name: { get_param: name }
            network_id: { get_param: network }
            fixed_ips:
                - subnet_id: { get_param: subnet }
            security_groups:
                - { get_param: security_group }
    floatingip_ass:
        type: OS::Neutron::FloatingIPAssociation
        properties:
            floatingip_id: { get_param: floating_ip }
            port_id: { get_resource: port }
        depends_on:
            - port
    server:
        type: OS::Nova::Server
        properties:
            name: { get_param: name }
            key_name: { get_param: keypair }
            image: { get_param: image }
            flavor: { get_param: flavor }
            networks:
                - port: { get_resource: port }
            user_data: |
                #!/bin/sh
                echo "==================="
                echo "CLOUD_INIT STARTING"
                echo "==================="
                if [ -f /etc/redhat-release ]; then
                    usr="ec2-user"
                elif [ -f /etc/lsb-release ]; then
                    usr="ubuntu"
                fi
                su -s /bin/sh -c "wget https://raw.githubusercontent.com/rajalokan/dotfiles/master/setup-workspace.sh -O /tmp/setup-workspace.sh && chmod +x /tmp/setup-workspace.sh && /tmp/setup-workspace.sh && rm /tmp/setup-workspace.sh" ${USR}
                su -s /bin/sh -c "wget https://raw.githubusercontent.com/rajalokan/quickstart-guts/master/quickstart-openstack.sh -O /tmp/quickstart-os.sh && chmod +x /tmp/quickstart-os.sh && time /tmp/quickstart-os.sh devstack" ${usr}
                echo "done"

            user_data_format: RAW
